{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,kBACjCC,EAASF,SAASC,cAAc,iBAChCE,EAAWH,SAASC,cAAc,mBA+BxC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAvCQN,SAASC,cAAc,SAE/Ba,iBAAiB,UAAU,SAAAC,GAChCA,EAAMC,iBAEN,IAAMC,EAAQC,SAASnB,EAAQoB,OACzBC,EAAOF,SAAShB,EAAOiB,OACvBE,EAASH,SAASf,EAASgB,OAEjC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,GAAU,EACrCC,EAAAzB,GAAS0B,OAAOC,QAAQ,0DAI1B,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,EAAG,CAGlBrB,EAFCqB,EAAI,EACAR,EAAQQ,EAAIL,GAI9BM,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBgB,EAAAzB,GAAS0B,OAAOK,QAAQ,qBAAoCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAEnEwB,OAAM,SAAAH,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBgB,EAAAzB,GAAS0B,OAAOC,QAAQ,oBAAmCK,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayEl = document.querySelector('[name=\"delay\"]');\nconst stepEl = document.querySelector('[name=\"step\"]');\nconst amountEl = document.querySelector('[name=\"amount\"]');\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = parseInt(delayEl.value);\n  const step = parseInt(stepEl.value);\n  const amount = parseInt(amountEl.value);\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    Notiflix.Notify.failure('Please check that the values entered are correct.');\n    return;\n  }\n\n  for (let i = 0; i < amount; i += 1) {\n    const position = i + 1;\n    const promiseDelay = delay + i * step;\n    const promise = createPromise(position, promiseDelay);\n\n    promise\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$delayEl","document","querySelector","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","parseInt","value","step","amount","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.b7e612b8.js.map"}